import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { format } from 'date-fns';
import { MealData } from './storage';
import { DAYS_OF_WEEK, MEAL_TYPES, getWeekDays } from './utils';

export interface PDFMealPlan {
  weekStartDate: string;
  meals: MealData;
  userInfo?: {
    name?: string;
    email?: string;
  };
}

export function generateMealPlanPDF(mealPlan: PDFMealPlan): void {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  
  // Header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('Weekly Meal Plan', pageWidth / 2, 20, { align: 'center' });
  
  // Week range
  const weekStart = new Date(mealPlan.weekStartDate);
  const weekDays = getWeekDays(weekStart);
  const weekEnd = weekDays[6];
  doc.setFontSize(14);
  doc.setFont('helvetica', 'normal');
  doc.text(
    `${format(weekStart, 'MMM d')} - ${format(weekEnd, 'MMM d, yyyy')}`,
    pageWidth / 2,
    30,
    { align: 'center' }
  );

  // User info if available
  if (mealPlan.userInfo?.name) {
    doc.setFontSize(12);
    doc.text(`Prepared for: ${mealPlan.userInfo.name}`, 20, 45);
  }

  // Preparation date
  doc.setFontSize(10);
  doc.text(`Generated on: ${format(new Date(), 'PPP')}`, 20, pageWidth - 20);

  // Prepare table data
  const tableData: string[][] = [];
  
  DAYS_OF_WEEK.forEach((day, index) => {
    const dayDate = weekDays[index];
    const dayName = `${day.charAt(0).toUpperCase() + day.slice(1)}`;
    const dateStr = format(dayDate, 'MMM d');
    
    const row = [
      `${dayName}\n${dateStr}`,
      mealPlan.meals[day]?.breakfast || '',
      mealPlan.meals[day]?.lunch || '',
      mealPlan.meals[day]?.dinner || ''
    ];
    tableData.push(row);
  });

  // Create table
  autoTable(doc, {
    head: [['Day', 'Breakfast', 'Lunch', 'Dinner']],
    body: tableData,
    startY: 60,
    theme: 'grid',
    styles: {
      fontSize: 10,
      cellPadding: 8,
      lineColor: [200, 200, 200],
      lineWidth: 0.5,
    },
    headStyles: {
      fillColor: [79, 70, 229], // Purple color
      textColor: [255, 255, 255],
      fontStyle: 'bold',
      fontSize: 11,
    },
    columnStyles: {
      0: { cellWidth: 30, fontStyle: 'bold' }, // Day column
      1: { cellWidth: 50 }, // Breakfast
      2: { cellWidth: 50 }, // Lunch
      3: { cellWidth: 50 }, // Dinner
    },
    alternateRowStyles: {
      fillColor: [249, 250, 251], // Light gray
    },
    margin: { left: 20, right: 20 },
  });

  // No notes section - removed for cleaner layout

  // Footer
  doc.setFontSize(8);
  doc.setTextColor(128, 128, 128);
  doc.text(
    'Generated by Weekly Food Planner App',
    pageWidth / 2,
    doc.internal.pageSize.height - 10,
    { align: 'center' }
  );

  // Generate filename
  const weekStartFormatted = format(weekStart, 'yyyy-MM-dd');
  const filename = `meal-plan-${weekStartFormatted}.pdf`;
  
  // Save the PDF
  doc.save(filename);
}

export async function generateShoppingListPDF(mealPlan: PDFMealPlan): Promise<void> {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  
  // Header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('Shopping List', pageWidth / 2, 20, { align: 'center' });
  
  // Week range
  const weekStart = new Date(mealPlan.weekStartDate);
  const weekDays = getWeekDays(weekStart);
  const weekEnd = weekDays[6];
  doc.setFontSize(14);
  doc.setFont('helvetica', 'normal');
  doc.text(
    `For week: ${format(weekStart, 'MMM d')} - ${format(weekEnd, 'MMM d, yyyy')}`,
    pageWidth / 2,
    30,
    { align: 'center' }
  );

  // Extract all meals
  const allMeals: string[] = [];
  DAYS_OF_WEEK.forEach(day => {
    MEAL_TYPES.forEach(mealType => {
      const meal = mealPlan.meals[day]?.[mealType];
      if (meal && meal.trim()) {
        allMeals.push(meal);
      }
    });
  });

  console.log('All meals for shopping list:', allMeals);

  if (allMeals.length === 0) {
    doc.setFontSize(12);
    doc.text('No meals planned for this week.', 20, 60);
  } else {
    try {
      // Use AI to extract ingredients
      const result = await extractIngredientsFromMeals(allMeals);
      
      let currentY = 50;
      
      // Create side-by-side layout
      if (result.grouped && result.grouped.length > 0 && result.consolidated && result.consolidated.length > 0) {
        // Store the initial Y position for both headers
        const headerY = currentY;
        
        // Left side: Grouped ingredients
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        doc.text('Ingredients by Meal:', 20, headerY);
        
        // Right side: Consolidated list header (same Y position)
        doc.text('Complete Shopping List:', 110, headerY);
        
        currentY += 10;
        
        // Create compact grouped list
        let leftY = currentY;
        result.grouped.forEach((mealGroup: any, groupIndex: number) => {
          const mealName = Object.keys(mealGroup)[0];
          const ingredients = mealGroup[mealName];
          
          if (Array.isArray(ingredients)) {
            // Meal name
            doc.setFontSize(10);
            doc.setFont('helvetica', 'bold');
            doc.text(mealName, 20, leftY);
            leftY += 5;
            
                         // Ingredients
             doc.setFontSize(9);
             doc.setFont('helvetica', 'normal');
             ingredients.forEach((ingredient: string) => {
               // Clean ingredient name (remove ampersands and other unwanted characters)
               const cleanIngredient = ingredient.replace(/[&]/g, 'and').trim();
               doc.text(`• ${cleanIngredient}`, 25, leftY);
               leftY += 4;
             });
            
            leftY += 3; // Space between meals
          }
        });
        
        // Create consolidated list
        let rightY = headerY + 10; // Align with header
        doc.setFontSize(9);
        doc.setFont('helvetica', 'normal');
        
        // Split consolidated ingredients into columns for better space usage
        const ingredientsPerColumn = Math.ceil(result.consolidated.length / 2);
        const leftColumn = result.consolidated.slice(0, ingredientsPerColumn);
        const rightColumn = result.consolidated.slice(ingredientsPerColumn);
        
        // Left column
        leftColumn.forEach((ingredient: string) => {
          // Clean ingredient name (remove ampersands and other unwanted characters)
          const cleanIngredient = ingredient.replace(/[&]/g, 'and').trim();
          doc.text(`• ${cleanIngredient}`, 110, rightY);
          rightY += 4;
        });
        
        // Right column - align with left column
        let rightColumnY = headerY + 10; // Align with header
        rightColumn.forEach((ingredient: string) => {
          // Clean ingredient name (remove ampersands and other unwanted characters)
          const cleanIngredient = ingredient.replace(/[&]/g, 'and').trim();
          doc.text(`• ${cleanIngredient}`, 160, rightColumnY);
          rightColumnY += 4;
        });
        
        // Add a line separator
        const maxY = Math.max(leftY, rightY);
        doc.setDrawColor(200, 200, 200);
        doc.line(20, maxY + 10, 190, maxY + 10);
        
        currentY = maxY + 20;
      } else if (result.consolidated && result.consolidated.length > 0) {
        // Fallback: Only consolidated list
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        doc.text('Shopping List:', 20, currentY);
        currentY += 10;
        
                 // Create consolidated list in columns
         const ingredientsPerColumn = Math.ceil(result.consolidated.length / 3);
         const columns = [
           result.consolidated.slice(0, ingredientsPerColumn),
           result.consolidated.slice(ingredientsPerColumn, ingredientsPerColumn * 2),
           result.consolidated.slice(ingredientsPerColumn * 2)
         ];
         
         doc.setFontSize(9);
         doc.setFont('helvetica', 'normal');
         
         const maxItems = Math.max(...columns.map(col => col.length));
         for (let i = 0; i < maxItems; i++) {
           let xPos = 20;
                       columns.forEach((column, colIndex) => {
              if (column[i]) {
                // Clean ingredient name (remove ampersands and other unwanted characters)
                const cleanIngredient = column[i].replace(/[&]/g, 'and').trim();
                doc.text(`• ${cleanIngredient}`, xPos, currentY);
              }
              xPos += 60;
            });
           currentY += 4;
         }
      }
    } catch (error) {
      console.error('Error extracting ingredients:', error);
      // Fallback to basic meal list
      const tableData = allMeals.map(meal => [meal, '☐']);
      
      autoTable(doc, {
        head: [['Meal', 'Done']],
        body: tableData,
        startY: 50,
        theme: 'grid',
        styles: {
          fontSize: 10,
          cellPadding: 6,
          lineColor: [200, 200, 200],
          lineWidth: 0.5,
        },
        headStyles: {
          fillColor: [34, 197, 94], // Green color
          textColor: [255, 255, 255],
          fontStyle: 'bold',
        },
        columnStyles: {
          0: { cellWidth: 140 }, // Meal column
          1: { cellWidth: 20, halign: 'center' }, // Checkbox column
        },
        margin: { left: 20, right: 20 },
      });
    }
  }

  // No shopping tips section - removed for cleaner layout

  // Footer
  doc.setFontSize(8);
  doc.setTextColor(128, 128, 128);
  doc.text(
    'Generated by Weekly Food Planner App',
    pageWidth / 2,
    doc.internal.pageSize.height - 10,
    { align: 'center' }
  );

  // Generate filename
  const weekStartFormatted = format(weekStart, 'yyyy-MM-dd');
  const filename = `shopping-list-${weekStartFormatted}.pdf`;
  
  // Save the PDF
  doc.save(filename);
}

async function extractIngredientsFromMeals(meals: string[]): Promise<{ grouped: any[], consolidated: string[] }> {
  try {
    // Get token from localStorage
    const token = localStorage.getItem('token');
    if (!token) {
      throw new Error('No authentication token found');
    }

    const response = await fetch('/api/ai/extract-ingredients', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify({ meals }),
    });

    if (!response.ok) {
      throw new Error('Failed to extract ingredients');
    }

    const data = await response.json();
    console.log('AI response for ingredients:', data);
    return {
      grouped: data.grouped || [],
      consolidated: data.consolidated || []
    };
  } catch (error) {
    console.error('Error calling AI for ingredients:', error);
    // Fallback: basic ingredient extraction
    const basicIngredients = extractBasicIngredients(meals);
    return {
      grouped: [],
      consolidated: basicIngredients
    };
  }
}

function extractBasicIngredients(meals: string[]): string[] {
  const ingredients = new Set<string>();
  
  // Basic ingredient mapping for common Indian dishes
  const ingredientMap: { [key: string]: string[] } = {
    'baigan': ['brinjal', 'eggplant'],
    'paneer': ['paneer'],
    'egg': ['eggs'],
    'chicken': ['chicken'],
    'fish': ['fish'],
    'dal': ['lentils', 'dal'],
    'rice': ['rice'],
    'roti': ['wheat flour', 'atta'],
    'bread': ['bread'],
    'milk': ['milk'],
    'curd': ['curd', 'yogurt'],
    'tomato': ['tomatoes'],
    'onion': ['onions'],
    'potato': ['potatoes'],
    'carrot': ['carrots'],
    'cauliflower': ['cauliflower', 'gobi'],
    'spinach': ['spinach', 'palak'],
    'coriander': ['coriander', 'dhania'],
    'ginger': ['ginger'],
    'garlic': ['garlic'],
    'turmeric': ['turmeric powder'],
    'cumin': ['cumin seeds'],
    'mustard': ['mustard seeds'],
    'oil': ['cooking oil'],
    'ghee': ['ghee'],
    'salt': ['salt'],
    'sugar': ['sugar'],
    'chilli': ['red chilli powder'],
    'masala': ['garam masala'],
  };

  meals.forEach(meal => {
    const lowerMeal = meal.toLowerCase();
    
    // Check for exact matches
    for (const [key, ingredientList] of Object.entries(ingredientMap)) {
      if (lowerMeal.includes(key)) {
        ingredientList.forEach(ingredient => ingredients.add(ingredient));
      }
    }
    
    // Add common ingredients that are usually needed
    if (lowerMeal.includes('curry') || lowerMeal.includes('sabji') || lowerMeal.includes('sabzi')) {
      ingredients.add('onions');
      ingredients.add('tomatoes');
      ingredients.add('ginger');
      ingredients.add('garlic');
      ingredients.add('turmeric powder');
      ingredients.add('cooking oil');
    }
  });

  return Array.from(ingredients).sort();
}